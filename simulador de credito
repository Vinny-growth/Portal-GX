<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aurum Capital - Simulador de Custo de Capital</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }
        .aurum-blue-bg { background-color: #002D72; }
        .aurum-blue-text { color: #002D72; }
        .btn-aurum {
            background-color: #002D72;
            color: white;
            transition: background-color 0.3s ease;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
        }
        .btn-aurum:hover { background-color: #001f50; }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 24px;
            margin-bottom: 24px;
        }
        input[type="text"], input[type="email"], input[type="tel"], input[type="number"], select {
            border: 1px solid #D1D5DB;
            padding: 0.625rem 0.75rem;
            border-radius: 0.375rem;
            width: 100%;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
        }
        input[type="text"]:focus, input[type="email"]:focus, input[type="tel"]:focus, input[type="number"]:focus, select:focus {
            outline: 2px solid transparent;
            outline-offset: 2px;
            border-color: #002D72;
            box-shadow: 0 0 0 2px rgba(0, 45, 114, 0.3);
        }
        label {
            display: block;
            margin-bottom: 0.375rem;
            font-weight: 500;
            color: #374151;
        }
        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex; align-items: center; justify-content: center;
            z-index: 1000;
        }
        .modal-content {
            background-color: white; padding: 2rem; border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            width: 90%; max-width: 500px;
        }
        .hidden { display: none; }
        .input-error { border-color: #EF4444; }
        .error-message { color: #EF4444; font-size: 0.875rem; margin-top: 0.25rem; }
        .aurum-logo-text {
            font-size: 2.25rem; font-weight: 700; color: #002D72;
        }
        .results-section { margin-bottom: 1.5rem; }
        .results-section h3 {
            font-size: 1.25rem; font-weight: 600; color: #002D72;
            margin-bottom: 0.75rem; padding-bottom: 0.25rem;
            border-bottom: 2px solid #002D72;
        }
        .result-grid-item {
            background-color: #f9fafb; padding: 0.75rem;
            border-radius: 0.25rem; border: 1px solid #e5e7eb;
        }
        .result-grid-item strong { color: #002D72; }
        .results-summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        @media (max-width: 640px) {
            .card { padding: 16px; }
            .aurum-logo-text { font-size: 1.875rem; }
            h2, .results-section h3 { font-size: 1.125rem; }
            .modal-content { padding: 1.5rem; }
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center justify-center p-4 sm:p-6">

    <div id="leadModalOverlay" class="modal-overlay hidden">
        <div class="modal-content">
            <h2 class="text-xl sm:text-2xl font-semibold aurum-blue-text mb-4 text-center">Acesse o Simulador de Custo de Capital</h2>
            <p class="text-gray-600 text-sm mb-6 text-center">Preencha seus dados para receber o relatório comparativo da simulação por e-mail e acessar o simulador.</p>
            <form id="leadForm" class="space-y-4">
                <div>
                    <label for="leadName">Nome Completo:</label>
                    <input type="text" id="leadName" name="leadName" required placeholder="Seu nome completo">
                    <p id="leadNameError" class="error-message hidden"></p>
                </div>
                <div>
                    <label for="leadEmail">Email:</label>
                    <input type="email" id="leadEmail" name="leadEmail" required placeholder="seuemail@dominio.com">
                    <p id="leadEmailError" class="error-message hidden"></p>
                </div>
                <div>
                    <label for="leadPhone">Telefone (com DDD):</label>
                    <input type="tel" id="leadPhone" name="leadPhone" required placeholder="(XX) XXXXX-XXXX">
                    <p id="leadPhoneError" class="error-message hidden"></p>
                </div>
                <button type="submit" class="btn-aurum w-full !mt-6">Acessar Simulador e Receber Relatório</button>
            </form>
            <p id="leadFormMessage" class="text-center text-sm mt-4"></p>
        </div>
    </div>

    <div id="simulatorContainer" class="w-full max-w-4xl hidden"> <header class="mb-6 sm:mb-8 text-center">
            <div class="aurum-logo-text mb-1">AURUM CAPITAL</div>
            <p class="text-lg sm:text-xl text-gray-600">Simulador Comparativo de Custo de Capital</p>
        </header>

        <div class="card">
            <h2 class="text-xl sm:text-2xl font-semibold aurum-blue-text mb-6">Dados da Empresa e Necessidade de Crédito</h2>
            <form id="capitalCostForm" class="grid grid-cols-1 md:grid-cols-2 gap-5">
                <div>
                    <label for="valorNecessidade">Valor da Necessidade (R$):</label>
                    <input type="number" id="valorNecessidade" step="0.01" required placeholder="Ex: 100000.00">
                </div>
                <div>
                    <label for="numParcelas">Prazo Desejado (meses):</label>
                    <input type="number" id="numParcelas" step="1" required placeholder="Ex: 36">
                </div>
                <div>
                    <label for="objetivoCredito">Objetivo do Crédito:</label>
                    <select id="objetivoCredito" required>
                        <option value="">Selecione...</option>
                        <option value="giro">Capital de Giro</option>
                        <option value="capex">Compra de Máquinas / CAPEX</option>
                        <option value="inovacao">Inovação / P&D</option>
                        <option value="exportacao">Financiamento à Exportação</option>
                    </select>
                </div>
                 <div>
                    <label for="faturamentoAnual">Faturamento Anual (R$):</label>
                    <input type="number" id="faturamentoAnual" step="0.01" required placeholder="Ex: 5000000.00">
                </div>
                <div>
                    <label for="ebitdaAnual">EBITDA Anual (R$):</label>
                    <input type="number" id="ebitdaAnual" step="0.01" required placeholder="Ex: 500000.00">
                </div>
                <div>
                    <label for="dividaBrutaAtual">Dívida Bruta Atual (R$) (Opcional):</label>
                    <input type="number" id="dividaBrutaAtual" step="0.01" placeholder="Ex: 200000.00">
                </div>
                <div class="md:col-span-2"> <button type="submit" class="btn-aurum w-full !mt-4">Simular Opções de Custo de Capital</button>
                </div>
            </form>
        </div>

        <div id="resultsArea" class="mt-6 sm:mt-8 hidden">
            <div class="card">
                <h2 class="text-xl sm:text-2xl font-semibold aurum-blue-text mb-6">Resultado Comparativo da Simulação</h2>
                <div id="summaryResultsContainer" class="mb-6">
                    </div>
                <div id="detailedResultsContainer">
                    </div>
                <p id="generalErrorMessage" class="text-red-600 mt-4 text-sm"></p>
            </div>
        </div>

        <footer class="text-center mt-8 sm:mt-12 text-xs sm:text-sm text-gray-500">
            <p>&copy; <span id="currentYear"></span> Aurum Capital. Todos os direitos reservados.</p>
            <p class="mt-1">Este simulador fornece estimativas indicativas. As taxas e condições exatas podem variar. Consulte um especialista Aurum Capital.</p>
        </footer>
    </div>

    <script>
        // --- Elementos do DOM ---
        const leadModalOverlay = document.getElementById('leadModalOverlay');
        const leadForm = document.getElementById('leadForm');
        const leadFormMessage = document.getElementById('leadFormMessage');
        const simulatorContainer = document.getElementById('simulatorContainer');
        const capitalCostForm = document.getElementById('capitalCostForm');
        const resultsArea = document.getElementById('resultsArea');
        const summaryResultsContainer = document.getElementById('summaryResultsContainer');
        const detailedResultsContainer = document.getElementById('detailedResultsContainer');
        const generalErrorMessage = document.getElementById('generalErrorMessage');
        
        const leadNameInput = document.getElementById('leadName');
        const leadEmailInput = document.getElementById('leadEmail');
        const leadPhoneInput = document.getElementById('leadPhone');
        const leadNameError = document.getElementById('leadNameError');
        const leadEmailError = document.getElementById('leadEmailError');
        const leadPhoneError = document.getElementById('leadPhoneError');

        let currentLeadData = null;

        // --- Taxas de Referência (Baseadas no artigo - Maio/2025) ---
        const REF_CDI_ANUAL = 0.0925; // Ex: 9.25% a.a.
        const REF_TLP_ANUAL = 0.0610; // Ex: 6.1% a.a. (para BNDES FINEM)
        const REF_IPCA_ANUAL = 0.0450; // Ex: 4.5% a.a. (estimativa)
        // IOF
        const IOF_ALIQUOTA_PRINCIPAL = 0.0038; // 0.38%
        const IOF_ALIQUOTA_DIARIA_PJ = 0.000041; // 0.0041% ao dia (PJ)

        // --- Funções Utilitárias ---
        function isValidEmail(email) { return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email); }
        function isValidPhone(phone) { return /^\(?\d{2}\)?[\s-]?\d{4,5}-?\d{4}$/.test(phone.replace(/\D/g, '')); }
        function toggleInputError(input, errorEl, msg, show) {
            errorEl.textContent = msg;
            errorEl.classList.toggle('hidden', !show);
            input.classList.toggle('input-error', show);
        }
        function formatCurrency(value, includeSymbol = true) {
            if (isNaN(value) || value === null) return includeSymbol ? "R$ 0,00" : "0,00";
            return value.toLocaleString('pt-BR', { style: includeSymbol ? 'currency' : 'decimal', currency: 'BRL', minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }
        function formatPercent(value, decimals = 2) {
            if (isNaN(value) || value === null) return "N/A";
            return `${(value * 100).toFixed(decimals)}%`;
        }
        function an_to_mon_rate(annual_rate) { return Math.pow(1 + annual_rate, 1/12) - 1; }
        function mon_to_an_rate(monthly_rate) { return Math.pow(1 + monthly_rate, 12) - 1; }

        // --- Inicialização ---
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('currentYear').textContent = new Date().getFullYear();
            if (sessionStorage.getItem('aurumLeadSubmitted') === 'true') {
                simulatorContainer.classList.remove('hidden');
                const storedLead = sessionStorage.getItem('aurumLeadData');
                if (storedLead) currentLeadData = JSON.parse(storedLead);
            } else {
                leadModalOverlay.classList.remove('hidden');
            }
        });

        // --- Formulário de Lead ---
        leadForm.addEventListener('submit', async (event) => { // Tornando a função async
            event.preventDefault();
            leadFormMessage.textContent = 'Enviando seus dados...';
            leadFormMessage.className = 'text-center text-sm mt-4 text-gray-600'; // Reset class
            let isValid = true;
            const name = leadNameInput.value.trim();
            const email = leadEmailInput.value.trim();
            const phone = leadPhoneInput.value.trim();

            [leadNameInput, leadEmailInput, leadPhoneInput].forEach(input => toggleInputError(input, document.getElementById(`${input.id}Error`), '', false));

            if (!name) { toggleInputError(leadNameInput, leadNameError, 'Nome é obrigatório.', true); isValid = false; }
            if (!email) { toggleInputError(leadEmailInput, leadEmailError, 'Email é obrigatório.', true); isValid = false; }
            else if (!isValidEmail(email)) { toggleInputError(leadEmailInput, leadEmailError, 'Formato de email inválido.', true); isValid = false; }
            if (!phone) { toggleInputError(leadPhoneInput, leadPhoneError, 'Telefone é obrigatório.', true); isValid = false; }
            else if (!isValidPhone(phone)) { toggleInputError(leadPhoneInput, leadPhoneError, 'Formato de telefone inválido. Use (XX) XXXXX-XXXX.', true); isValid = false; }

            if (isValid) {
                currentLeadData = { name, email, phone, timestamp: new Date().toISOString() };
                
                // Construir o corpo do formulário para application/x-www-form-urlencoded
                const formData = new URLSearchParams();
                formData.append('name', name); // Assumindo que a API espera 'name'
                formData.append('email', email); // Assumindo que a API espera 'email'
                formData.append('phone', phone); // Assumindo que a API espera 'phone'
                // Adicione quaisquer outros campos que a API /contact-post possa esperar
                // Ex: formData.append('message', 'Lead do Simulador de Custo de Capital');
                // Ex: formData.append('origin', 'Simulador Aurum');

                try {
                    const response = await fetch('https://gx.capital/contact-post', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: formData.toString()
                    });

                    if (response.ok) {
                        // A API pode retornar HTML, como indicado por 'accept' no log.
                        // Se você precisar processar a resposta, faça aqui.
                        // Ex: const responseText = await response.text();
                        // console.log("Resposta da API de contato:", responseText);

                        leadFormMessage.textContent = 'Obrigado! Seus dados foram enviados. Carregando simulador...';
                        leadFormMessage.className = 'text-center text-sm mt-4 text-green-600';
                        sessionStorage.setItem('aurumLeadSubmitted', 'true');
                        sessionStorage.setItem('aurumLeadData', JSON.stringify(currentLeadData));
                        
                        console.log("Dados do Lead enviados com sucesso para API gx.capital:", currentLeadData);

                        setTimeout(() => {
                            leadModalOverlay.classList.add('hidden');
                            simulatorContainer.classList.remove('hidden');
                            simulatorContainer.scrollIntoView({ behavior: 'smooth' });
                        }, 1500);
                    } else {
                        // Se a resposta não for OK, tratar o erro
                        console.error("Erro ao enviar dados do lead para API gx.capital. Status:", response.status);
                        const errorText = await response.text();
                        console.error("Detalhes do erro da API:", errorText);
                        leadFormMessage.textContent = `Erro ao enviar seus dados (Status: ${response.status}). Tente novamente.`;
                        leadFormMessage.className = 'text-center text-sm mt-4 text-red-500';
                    }
                } catch (error) {
                    // Erro de rede ou CORS
                    console.error("Erro de rede ou CORS ao tentar enviar dados do lead:", error);
                    leadFormMessage.textContent = 'Erro de rede ao tentar enviar seus dados. Verifique sua conexão ou as configurações de CORS do servidor.';
                    leadFormMessage.className = 'text-center text-sm mt-4 text-red-500';
                }

            } else {
                leadFormMessage.textContent = 'Por favor, corrija os erros.';
                leadFormMessage.className = 'text-center text-sm mt-4 text-red-500';
            }
        });

        // --- Lógica do Simulador de Custo de Capital ---

        function calcularParcelaPrice(PV, i_mensal_decimal, n) {
            if (i_mensal_decimal === 0) return PV / n;
            return PV * (i_mensal_decimal * Math.pow(1 + i_mensal_decimal, n)) / (Math.pow(1 + i_mensal_decimal, n) - 1);
        }

        function calculateIRR(cashFlows, guess = 0.01, maxIterations = 1000, tolerance = 1e-7) {
            let rate = guess;
            for (let iter = 0; iter < maxIterations; iter++) {
                let npv = 0;
                let derivative = 0;
                for (let t = 0; t < cashFlows.length; t++) {
                    npv += cashFlows[t] / Math.pow(1 + rate, t);
                    if (t > 0) derivative -= (t * cashFlows[t]) / Math.pow(1 + rate, t + 1);
                }
                if (Math.abs(npv) < tolerance) return rate;
                if (derivative === 0) return null;
                let newRate = rate - npv / derivative;
                const rateChange = newRate - rate;
                if (Math.abs(rateChange) > 0.5) newRate = rate + Math.sign(rateChange) * 0.5;
                rate = newRate;
                if (rate <= -1) return null;
            }
            return null; // Não convergiu
        }
        
        function calcularIOF(valor, prazoMeses) {
            const prazoDias = Math.min(prazoMeses * 30, 365); // Limite de 365 dias para IOF diário
            const iofPrincipal = valor * IOF_ALIQUOTA_PRINCIPAL;
            const iofAdicional = valor * IOF_ALIQUOTA_DIARIA_PJ * prazoDias;
            return iofPrincipal + iofAdicional;
        }

        capitalCostForm.addEventListener('submit', (event) => {
            event.preventDefault();
            resultsArea.classList.add('hidden');
            summaryResultsContainer.innerHTML = '';
            detailedResultsContainer.innerHTML = '';
            generalErrorMessage.textContent = '';

            const valorNecessidade = parseFloat(document.getElementById('valorNecessidade').value);
            const numParcelas = parseInt(document.getElementById('numParcelas').value);
            const objetivoCredito = document.getElementById('objetivoCredito').value;
            const faturamentoAnual = parseFloat(document.getElementById('faturamentoAnual').value);
            const ebitdaAnual = parseFloat(document.getElementById('ebitdaAnual').value);
            const dividaBrutaAtual = parseFloat(document.getElementById('dividaBrutaAtual').value) || 0;

            if (isNaN(valorNecessidade) || valorNecessidade <= 0 ||
                isNaN(numParcelas) || numParcelas <= 0 || !objetivoCredito ||
                isNaN(faturamentoAnual) || faturamentoAnual <=0 || isNaN(ebitdaAnual) ) { // EBITDA pode ser negativo
                generalErrorMessage.textContent = "Por favor, preencha todos os campos obrigatórios da empresa e necessidade com valores válidos.";
                resultsArea.classList.remove('hidden'); // Para mostrar a mensagem de erro
                return;
            }

            let simulatedLines = [];

            // --- Linha: Capital de Giro Bancário (Exemplo) ---
            if (objetivoCredito === 'giro' || objetivoCredito === 'capex') { // Capex também pode usar giro
                const spreadAnual = 0.040; // Ex: CDI + 4.0 p.p. (média de 3-5 p.p. do artigo)
                const taxaNominalAnual = REF_CDI_ANUAL + spreadAnual;
                const taxaNominalMensal = an_to_mon_rate(taxaNominalAnual);
                
                const iof = calcularIOF(valorNecessidade, numParcelas);
                const tacGiro = valorNecessidade * 0.01 > 500 ? valorNecessidade * 0.01 : 500; // Ex: 1% ou min R$500
                const valorLiberado = valorNecessidade - iof - tacGiro;
                
                const parcela = calcularParcelaPrice(valorNecessidade, taxaNominalMensal, numParcelas);
                
                const cashFlows = [valorLiberado];
                for (let i = 0; i < numParcelas; i++) cashFlows.push(-parcela);
                
                const cetMensalDecimal = calculateIRR(cashFlows);
                simulatedLines.push({
                    nome: "Capital de Giro Bancário (Estimado)",
                    taxaNominalAnual: formatPercent(taxaNominalAnual),
                    parcela: formatCurrency(parcela),
                    iof: formatCurrency(iof),
                    tac: formatCurrency(tacGiro),
                    valorLiberado: formatCurrency(valorLiberado),
                    cetMensal: cetMensalDecimal !== null ? formatPercent(cetMensalDecimal, 4) : "N/A",
                    cetAnual: cetMensalDecimal !== null ? formatPercent(mon_to_an_rate(cetMensalDecimal), 4) : "N/A",
                });
            }

            // --- Linha: FIDC Padrão (Exemplo para Giro) ---
            if (objetivoCredito === 'giro') {
                const spreadAnualFIDC = 0.009; // Ex: CDI + 0.9 p.p.
                const taxaNominalAnualFIDC = REF_CDI_ANUAL + spreadAnualFIDC;
                const taxaNominalMensalFIDC = an_to_mon_rate(taxaNominalAnualFIDC);
                const iofFIDC = calcularIOF(valorNecessidade, numParcelas);
                const custoEstruturacaoFIDC = valorNecessidade * 0.015; // Ex: 1.5% flat
                const valorLiberadoFIDC = valorNecessidade - iofFIDC - custoEstruturacaoFIDC;

                const parcelaFIDC = calcularParcelaPrice(valorNecessidade, taxaNominalMensalFIDC, numParcelas);
                const cashFlowsFIDC = [valorLiberadoFIDC];
                for (let i = 0; i < numParcelas; i++) cashFlowsFIDC.push(-parcelaFIDC);

                const cetMensalDecimalFIDC = calculateIRR(cashFlowsFIDC);
                 simulatedLines.push({
                    nome: "FIDC Padrão (Estimado)",
                    taxaNominalAnual: formatPercent(taxaNominalAnualFIDC),
                    parcela: formatCurrency(parcelaFIDC),
                    iof: formatCurrency(iofFIDC),
                    custoEstruturacao: formatCurrency(custoEstruturacaoFIDC),
                    valorLiberado: formatCurrency(valorLiberadoFIDC),
                    cetMensal: cetMensalDecimalFIDC !== null ? formatPercent(cetMensalDecimalFIDC, 4) : "N/A",
                    cetAnual: cetMensalDecimalFIDC !== null ? formatPercent(mon_to_an_rate(cetMensalDecimalFIDC), 4) : "N/A",
                });
            }
            
            // --- Linha: Nota Promissória (Exemplo para Giro, curto prazo) ---
            if (objetivoCredito === 'giro' && numParcelas <= 12) { 
                const spreadAnualNP = 0.012; // Ex: CDI + 1.2 p.p.
                const taxaNominalAnualNP = REF_CDI_ANUAL + spreadAnualNP;
                const taxaNominalMensalNP = an_to_mon_rate(taxaNominalAnualNP);
                const custoEstruturacaoNP = valorNecessidade * 0.005; // Ex: 0.5% flat
                const valorLiberadoNP = valorNecessidade - custoEstruturacaoNP; // IOF Isento

                const parcelaNP = calcularParcelaPrice(valorNecessidade, taxaNominalMensalNP, numParcelas);
                const cashFlowsNP = [valorLiberadoNP];
                for (let i = 0; i < numParcelas; i++) cashFlowsNP.push(-parcelaNP);
                
                const cetMensalDecimalNP = calculateIRR(cashFlowsNP);
                simulatedLines.push({
                    nome: "Nota Promissória Comercial (Estimada)",
                    taxaNominalAnual: formatPercent(taxaNominalAnualNP),
                    parcela: formatCurrency(parcelaNP),
                    iof: "Isento",
                    custoEstruturacao: formatCurrency(custoEstruturacaoNP),
                    valorLiberado: formatCurrency(valorLiberadoNP),
                    cetMensal: cetMensalDecimalNP !== null ? formatPercent(cetMensalDecimalNP, 4) : "N/A",
                    cetAnual: cetMensalDecimalNP !== null ? formatPercent(mon_to_an_rate(cetMensalDecimalNP), 4) : "N/A",
                });
            }

            // --- Linha: BNDES FINEM (Exemplo para CAPEX) ---
            if (objetivoCredito === 'capex' && valorNecessidade >= 1000000) { 
                const spreadAnualBNDES = 0.025; 
                const taxaNominalAnualBNDES = REF_TLP_ANUAL + spreadAnualBNDES; 
                const taxaNominalMensalBNDES = an_to_mon_rate(taxaNominalAnualBNDES);
                const iofBNDES = calcularIOF(valorNecessidade, numParcelas);
                const custoAnaliseBNDES = valorNecessidade * 0.005; 
                const valorLiberadoBNDES = valorNecessidade - iofBNDES - custoAnaliseBNDES;
                
                const parcelaBNDES = calcularParcelaPrice(valorNecessidade, taxaNominalMensalBNDES, numParcelas);
                const cashFlowsBNDES = [valorLiberadoBNDES];
                for (let i = 0; i < numParcelas; i++) cashFlowsBNDES.push(-parcelaBNDES);

                const cetMensalDecimalBNDES = calculateIRR(cashFlowsBNDES);
                 simulatedLines.push({
                    nome: "BNDES FINEM (Estimado)",
                    taxaNominalAnual: formatPercent(taxaNominalAnualBNDES),
                    parcela: formatCurrency(parcelaBNDES),
                    iof: formatCurrency(iofBNDES),
                    custoAnalise: formatCurrency(custoAnaliseBNDES),
                    valorLiberado: formatCurrency(valorLiberadoBNDES),
                    cetMensal: cetMensalDecimalBNDES !== null ? formatPercent(cetMensalDecimalBNDES, 4) : "N/A",
                    cetAnual: cetMensalDecimalBNDES !== null ? formatPercent(mon_to_an_rate(cetMensalDecimalBNDES), 4) : "N/A",
                });
            }
            
            // --- Linha: Cartão BNDES (Exemplo para CAPEX, valores menores) ---
             if (objetivoCredito === 'capex' && valorNecessidade <= 2000000) { 
                const spreadAnualCartao = 0.012; // IPCA + 1.2%
                const taxaNominalAnualCartao = REF_IPCA_ANUAL + spreadAnualCartao;
                const taxaNominalMensalCartao = an_to_mon_rate(taxaNominalAnualCartao);
                const iofCartao = calcularIOF(valorNecessidade, numParcelas);
                const valorLiberadoCartao = valorNecessidade - iofCartao; 
                
                const parcelaCartao = calcularParcelaPrice(valorNecessidade, taxaNominalMensalCartao, numParcelas);
                const cashFlowsCartao = [valorLiberadoCartao];
                for (let i = 0; i < numParcelas; i++) cashFlowsCartao.push(-parcelaCartao);

                const cetMensalDecimalCartao = calculateIRR(cashFlowsCartao);
                 simulatedLines.push({
                    nome: "Cartão BNDES 4.0 (Estimado)",
                    taxaNominalAnual: `${formatPercent(REF_IPCA_ANUAL)} (IPCA) + ${formatPercent(spreadAnualCartao)} = ${formatPercent(taxaNominalAnualCartao)}`,
                    parcela: formatCurrency(parcelaCartao),
                    iof: formatCurrency(iofCartao),
                    valorLiberado: formatCurrency(valorLiberadoCartao),
                    cetMensal: cetMensalDecimalCartao !== null ? formatPercent(cetMensalDecimalCartao, 4) : "N/A",
                    cetAnual: cetMensalDecimalCartao !== null ? formatPercent(mon_to_an_rate(cetMensalDecimalCartao), 4) : "N/A",
                });
            }

            // --- Exibir Resultados ---
            if (simulatedLines.length === 0) {
                generalErrorMessage.textContent = "Nenhuma linha de crédito foi simulada para os critérios fornecidos. Tente ajustar o objetivo ou os valores.";
            } else {
                simulatedLines.forEach(line => {
                    const sectionDiv = document.createElement('div');
                    sectionDiv.classList.add('results-section');
                    let content = `<h3>${line.nome}</h3><div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">`;
                    content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">Taxa Nominal Anual:</span> <strong>${line.taxaNominalAnual}</strong></div>`;
                    content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">Parcela Estimada:</span> <strong>${line.parcela}</strong></div>`;
                    if(line.iof) content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">IOF Estimado:</span> <strong>${line.iof}</strong></div>`;
                    if(line.tac) content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">TAC Estimada:</span> <strong>${line.tac}</strong></div>`;
                    if(line.custoEstruturacao) content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">Custo Estruturação:</span> <strong>${line.custoEstruturacao}</strong></div>`;
                    if(line.custoAnalise) content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">Custo Análise:</span> <strong>${line.custoAnalise}</strong></div>`;
                    content += `<div class="result-grid-item"><span class="block text-sm text-gray-500">Valor Líquido Liberado:</span> <strong>${line.valorLiberado}</strong></div>`;
                    content += `<div class="result-grid-item bg-blue-50 border-blue-200"><span class="block text-sm text-gray-500">CET Mensal Estimado:</span> <strong class="aurum-blue-text text-lg">${line.cetMensal}</strong></div>`;
                    content += `<div class="result-grid-item bg-blue-50 border-blue-200"><span class="block text-sm text-gray-500">CET Anual Estimado:</span> <strong class="aurum-blue-text text-lg">${line.cetAnual}</strong></div>`;
                    content += `</div>`;
                    sectionDiv.innerHTML = content;
                    detailedResultsContainer.appendChild(sectionDiv);
                });
            }

            if (ebitdaAnual !== 0 && ebitdaAnual !== null) { 
                const dbEbitdaAntes = dividaBrutaAtual / ebitdaAnual;
                const dbEbitdaDepois = (dividaBrutaAtual + valorNecessidade) / ebitdaAnual;
                summaryResultsContainer.innerHTML = `
                    <h3 class="text-lg font-semibold aurum-blue-text mb-3">Impacto Estimado na Alavancagem</h3>
                    <div class="results-summary-grid">
                        <div class="result-grid-item"><span class="block text-sm text-gray-500">Dívida Bruta / EBITDA (Antes):</span> <strong>${isFinite(dbEbitdaAntes) ? dbEbitdaAntes.toFixed(2) + 'x' : 'N/A'}</strong></div>
                        <div class="result-grid-item"><span class="block text-sm text-gray-500">Dívida Bruta / EBITDA (Depois):</span> <strong>${isFinite(dbEbitdaDepois) ? dbEbitdaDepois.toFixed(2) + 'x' : 'N/A'}</strong></div>
                    </div>`;
            } else {
                 summaryResultsContainer.innerHTML = `<p class="text-sm text-gray-600">EBITDA não informado ou zero, não foi possível calcular o impacto na alavancagem.</p>`;
            }

            resultsArea.classList.remove('hidden');
            resultsArea.scrollIntoView({ behavior: 'smooth' });

            if (currentLeadData && currentLeadData.email) {
                console.log(`Simulando envio de RELATÓRIO COMPARATIVO para: ${currentLeadData.email}`);
                const emailReport = {
                    leadInfo: currentLeadData,
                    companyInputs: {
                        valorNecessidade: formatCurrency(valorNecessidade),
                        numParcelas,
                        objetivoCredito,
                        faturamentoAnual: formatCurrency(faturamentoAnual),
                        ebitdaAnual: formatCurrency(ebitdaAnual),
                        dividaBrutaAtual: formatCurrency(dividaBrutaAtual)
                    },
                    simulatedLines,
                    impactoDBEBITDA: summaryResultsContainer.innerText 
                };
                console.log("Conteúdo do Email (Simulação):", JSON.stringify(emailReport, null, 2));
            }
        });
    </script>
</body>
</html>
